# -*- coding: utf-8 -*-
"""Untitled9.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tX1_ziDuopqLwvmW_DAYcAfUBBVsksTf
"""

import numpy as np
import pandas as pd
import warnings
warnings.simplefilter(action='ignore', category=FutureWarning)

data = pd.read_csv('imdb_top_1000.csv')
df = pd.DataFrame(data)
df.head(3)

df.info()

df.describe()

df.isna().sum()

df =df.drop(columns = ['Certificate','Gross','Poster_Link','Meta_score'])
df.head(3)

min_vote = df['No_of_Votes'].quantile(.9)
min_vote

mean_vote = df['IMDB_Rating'].mean()
mean_vote

max_vote_movies = df.loc[df['No_of_Votes'] >= min_vote]
max_vote_movies.shape

def simple_recommender(x , mean_ = mean_vote , min_ = min_vote):
    rate = x['IMDB_Rating']
    voters = x['No_of_Votes']
    return ( ( voters / (voters + min_) * rate ) + ( min_ / (voters + min_) * mean_ ) )

max_vote_movies = max_vote_movies.assign(weighted_avg=max_vote_movies.apply(simple_recommender, axis=1))
max_vote_movies = max_vote_movies.sort_values('weighted_avg' ,ascending = False )
max_vote_movies = max_vote_movies.round({'weighted_avg': 2})
max_vote_movies[['Series_Title','Released_Year','IMDB_Rating','weighted_avg']].head(10)

df['Overview'].head(20)

from sklearn.feature_extraction.text import TfidfVectorizer,CountVectorizer
from sklearn.metrics.pairwise import cosine_similarity,linear_kernel

tfidf = TfidfVectorizer(stop_words='english')
tfidf_matrix = tfidf.fit_transform(df['Overview'])
tfidf_matrix.shape

sim_vec = linear_kernel(tfidf_matrix , tfidf_matrix)

indexes = pd.Series(df.index , index = df['Series_Title'])
indexes

def recommend_movies(x , sim_vec):
    id_ = indexes[x]
    sim_movies = list(enumerate(sim_vec[id_]))
    sim_movies = sorted(sim_movies , key = lambda x : x[1] , reverse=True)
    sim_movies = sim_movies[1:11]
    R_movies = []
    for i in sim_movies:
        R_movies.append(i[0])
    return df[['Series_Title','Released_Year','IMDB_Rating','Genre','Director','Star1','Star2','Star3','Star4']].iloc[R_movies]

recommend_movies('12 Angry Men' , sim_vec)

recommend_movies('12 Angry Men' , sim_vec)

df.head(3)

df['meta_soup'] = df['Genre'] +' '+ df['Director'] +' ' + df['Star1'] +' '+df['Star2'] +' '+ df['Star3'] +' ' + df['Star4']
df['meta_soup'].head(3)

count_vec  = CountVectorizer(stop_words='english')
count_matrix = count_vec.fit_transform(df['meta_soup'])
count_matrix.shape

sim_vec2 = cosine_similarity(count_matrix , count_matrix)

indexes = pd.Series(df.index , index = df['Series_Title'])

recommend_movies('12 Angry Men' , sim_vec2)

recommend_movies("Breakfast at Tiffany's" , sim_vec2)

recommend_movies("Inception" , sim_vec2)

plt.figure(figsize=(8, 6))
sns.histplot(data['IMDB_Rating'], bins=30, kde=True, color='skyblue')
plt.title('Distribution of IMDb Ratings')
plt.xlabel('IMDb Rating')
plt.ylabel('Frequency')
plt.show()

plt.figure(figsize=(8, 6))
sns.histplot(data['Meta_score'], bins=30, kde=True, color='skyblue')
plt.title('Distribution of Meta Score Ratings')
plt.xlabel('Meta Score')
plt.ylabel('Frequency')
plt.show()

sns.scatterplot(x='No_of_Votes', y='IMDB_Rating', data=data)
plt.title('Relationship between User Votes and IMDb Ratings')
plt.show()

top_movies_imdb = data.sort_values(by='IMDB_Rating', ascending=False).head(5)

# Sort the DataFrame by Meta score in descending order
top_movies_meta = data.sort_values(by='Meta_score', ascending=False).head(5)

# Plotting
plt.figure(figsize=(12, 6))

# Plotting IMDb Rating
plt.subplot(1, 2, 1)
sns.barplot(x='IMDB_Rating', y='Series_Title', data=top_movies_imdb, palette='Blues_r')
plt.title('Top 5 Movies Based on IMDb Rating')

# Plotting Meta score
plt.subplot(1, 2, 2)
sns.barplot(x='Meta_score', y='Series_Title', data=top_movies_meta, palette='Reds_r')
plt.title('Top 5 Movies Based on Meta Score')

plt.tight_layout()
plt.show()

top_voted_movies = data.sort_values(by='No_of_Votes', ascending=False).head(5)

plt.figure(figsize=(10, 6))
sns.barplot(x='No_of_Votes', y='Series_Title', data=top_voted_movies, palette='viridis')
plt.title('Top 5 Voted Movies')
plt.xlabel('Number of Votes')
plt.ylabel('Movie Title')
plt.show()

top_rated_movies = data.sort_values(by='IMDB_Rating', ascending=False).head(5)

# Plotting
plt.figure(figsize=(12, 6))
sns.barplot(x='IMDB_Rating', y='Series_Title', data=top_voted_movies, palette='Blues_r')
plt.title('Top 5 Voted Movies based on IMDb Rating')
plt.xlabel('IMDb Rating')
plt.ylabel('Movie Title')
plt.show()

top_meta_movies = data.sort_values(by='Meta_score', ascending=False).head(5)

# Plotting
plt.figure(figsize=(12, 6))
sns.barplot(x='Meta_score', y='Series_Title', data=top_voted_movies, palette='Reds_r')
plt.title('Top 5 Voted Movies based on Meta Score')
plt.xlabel('Meta Score')
plt.ylabel('Movie Title')
plt.show()

